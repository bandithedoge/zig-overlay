#!/usr/bin/env nix-shell
#! nix-shell -p curl jq minisign -i sh
# shellcheck shell=sh
set -e

# The well known public key for Zig
PUBLIC_KEY="RWSGOq2NVecA2UPNdBUZykf1CCb147pkmdtYxgb3Ti+JO/wCYvhbAb/U"

rm -rf ./*index.json zig-index.json.minisig mirrors.txt

# Grab the JSON and parse the version
curl -s 'https://ziglang.org/download/index.json' >zig-index.json
VERSION=$(jq -r '.master.version' <zig-index.json)
echo "Parsing master version: ${VERSION}"

# Verify the signature of the JSON before we parse it
curl -s "https://ziglang.org/builds/zig-${VERSION}-index.json.minisig" >zig-index.json.minisig
minisign -V -P ${PUBLIC_KEY} -x zig-index.json.minisig -m zig-index.json

# Merge Mach's index.json with the official one
curl -s 'https://machengine.org/zig/index.json' >mach-index.json
jq -s '.[0] * .[1]' mach-index.json zig-index.json >index.json

# Grab a list of mirrors for old nightly builds
curl -s 'https://ziglang.org/download/community-mirrors.txt' >mirrors.txt

# Build our new sources.json
jq -f sources.jq <index.json >sources.new.json

# For debugging
# cat sources.new.json
# exit

# Copy the old file since jq can't modify in-place. This is also a backup.
cp sources.json sources.old.json

# Recursive merge
jq -s '.[0] * .[1]' sources.old.json sources.new.json >sources.json

cp zls-versions.json zls-versions.old.json
echo "{}" > zls-versions.new.json

for version in $(jq '([.[].[].version], [.master.[].[].version] | unique | map(select(. != null))) - ($old.[0] | keys) | .[]' -r --slurpfile old zls-versions.json <sources.json); do
  echo "fetching zls for $version"
  curl -s -G \
    --data-urlencode "zig_version=$version" \
    --data-urlencode "compatibility=only-runtime" \
    "https://releases.zigtools.org/v1/zls/select-version" |
    jq "{\"$version\": .}" >temp.json
  jq '.[0] * .[1]' -s zls-versions.old.json temp.json >zls-versions.new.json
  cp zls-versions.new.json zls-versions.old.json
done

cp zls-versions.new.json zls-versions.json

jq '[.[]] | unique_by(.version) | map(select(has("version"))) | map({key: .version, value: .}) | from_entries' <zls-versions.json > zls-sources.json
